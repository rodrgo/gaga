// created by Chenshuai Sui for testing of matrix completion algorithms 2014


#include<math.h>
#include "cula.h"


//Partial SVD based on simultaneous power iteration

void PartialSVD_SPI(float *d_U, float *h_S, float *d_V, float *d_Mat, float *d_A, float *d_U_prev, float *h_S_prev,  float *d_R, const int m, const int n, const int r, const int maxIter, const float Tol, cublasHandle_t handle)
{ 

//printf("Inside PartialSVD_SPI");

  // create control variables
  float err=Tol+1.0f;
  float err_num;
	float err_denom;
  int iter = 0;
	float one = 1.0f;
	float zero = 0.0f;

  // Define iteration matrix d_A = d_Mat*dMat'
  cublasSgemm(handle, CUBLAS_OP_N, CUBLAS_OP_T, m,m,n, &one,d_Mat, m,d_Mat, m, &zero, d_A,m);
	SAFEcublas("d_A = d_Mat*dMat");

  // d_U = A*d_U_prev;
  cublasSgemm(handle, CUBLAS_OP_N,CUBLAS_OP_N, m,r,m, &one,d_A, m,d_U_prev, m, &zero, d_U,m);
  SAFEcublas("d_U = A*d_U_prev");

  // run the power iteration until convergence
   
	culaStatus s;
	s = culaInitialize();
	if(s != culaNoError)
	{
	printf("%s\n", culaGetStatusString(s));
	}
  for (int i=0; i<r; i++){      
    h_S_prev[i] = 0.0f;
  }

  
  while ( (err > Tol) && (iter < maxIter) ){
   
      //QR factorization
      s = culaDeviceSgeqrf(m,r,d_U, m, d_R);
      if(s != culaNoError)
	{
	printf("%s\n", culaGetStatusString(s));
	}
      s = culaDeviceSorgqr(m,r,r, d_U, m, d_R);
       if(s != culaNoError)
	{
	printf("%s\n", culaGetStatusString(s));
	}

      cublasScopy(handle, m*r, d_U, 1, d_U_prev,1);
			SAFEcublas("d_U_prev = d_U");
      // d_U = A*d_U_prev;
      cublasSgemm(handle, CUBLAS_OP_N, CUBLAS_OP_N, m,r,m, &one,d_A, m,d_U_prev, m, &zero, d_U,m);
     	SAFEcublas("d_U = A*d_U_prev");
      
      for (int i=0; i<r; i++){
				cublasSdot(handle, m, d_U+i*m, 1, d_U_prev+i*m, 1, h_S+i);
				SAFEcublas("cublasSdot");
      }
      
      //cublasSaxpy(r, -1.0f, d_S,1, d_S_prev, 1);
      //err = cublasSnrm2(r, d_S_prev,1);
      
      err_num = 0.0f;
			err_denom = 0.0f;
      for (int i=0; i<r; i++){
        err_num += (h_S[i] - h_S_prev[i])*(h_S[i] - h_S_prev[i]);
				err_denom += h_S[i]*h_S[i];
        h_S_prev[i] = h_S[i];
      }
      err = sqrt(err_num/err_denom);
      
      
      //swap d_S with d_S_prev
      //cublasScopy(r, d_S, 1, d_S_prev,1);
      
      iter++;
   } // end while loop on power iteration

	if (iter == maxIter) printf("SVD: Maximum number of iterations reached.\n");

   for (int i=0; i<r; i++){
	h_S[i] = sqrt(h_S[i]);
	h_S_prev[i] = 1.0f/h_S[i];
   }

    cublasScopy(handle, m*r, d_U_prev, 1, d_U,1);

   // let d_U_prev = d_U_prev *d_S^(-1)
   for (int i=0; i<r; i++){
	cublasSscal(handle, m, h_S_prev+i, d_U_prev + i*m, 1);
	SAFEcublas("cublasSscal");
   }
   // Then d_V = M'*d_U_prev
   cublasSgemm(handle, CUBLAS_OP_T, CUBLAS_OP_N, n,r,m, &one, d_Mat, m, d_U_prev, m, &zero, d_V, n);
	 SAFEcublas("d_V = M'*d_U_prev");

	
  culaShutdown();

  return;
} // end PartialSVD





//=====================Subspace Restricted Iterations ===================================================

void RestrictedSD_MC_S_entry_SPI(float *d_Mat, float *Grad, float *Grad_proj, float *d_Y, float *d_U, float *d_S, float *d_V, int *d_A, float *d_y, float *d_MM, float *d_U_prev, float *d_R, float *h_S, float *h_S_prev, float *residNorm_prev, const int m, const int n, const int r, const int p, const int mn, const int maxIter, const float Tol, curandGenerator_t gen, dim3 threadsPerBlockp, dim3 numBlocksp, dim3 threadsPerBlocknr, dim3 numBlocksnr, dim3 threadsPerBlockmn, dim3 numBlocksmn, cublasHandle_t handle)
{ 
/*
This function performs a single iteration of a subspace restricted steepest descent step.  The subspace restriction is to the rank r column space.  
*/
  float alpha=0;
  float err=0;
	float minus_one = -1.0f;

  // form Grad = A^*(Y-A(MAT))
  cublasScopy(handle, mn, d_Y, 1, Grad, 1);
  SAFEcublas("cublasScopy in RestrictedSD_MC_S_entry.");

  A_entry_mat(Grad_proj, d_Mat, d_A, mn, p, threadsPerBlockmn, numBlocksmn, threadsPerBlockp, numBlocksp);
  SAFEcuda("A_entry_mat in RestrictedSD_MC_S_entry.");

  cublasSaxpy(handle, mn, &minus_one, Grad_proj, 1, Grad, 1);
  SAFEcublas("cublasSaxpy (1) in RestrictedSD_MC_S_entry.");

  // recording the convergence of the residual
  for (int j = 0; j<15; j++) residNorm_prev[j] = residNorm_prev[j+1];
  cublasSnrm2(handle, mn, Grad, 1, &err);
  SAFEcublas("cublasSnrm2 (1) in RestrictedSD_MC_S_entry.");
  residNorm_prev[15]=err;
//printf("err = %f\t",err);
  // Now project the gradient onto the column space defined by U and store in Grad_proj
  ColumnSpProj(Grad_proj, Grad, d_U, d_V, m, n, r, handle);
  SAFEcuda("ColumnSpProj in RestrictedSD_MC_S_entry.");

  // Now compute the step size:
  // compute the norm of A(Grad_proj) using err to store the value: we use the vector entry sensing
  A_entry_vec(d_y, Grad_proj, d_A, p, threadsPerBlockp, numBlocksp);
  SAFEcuda("A_entry_vec in RestrictedSD_MC_S_entry.");
  cublasSnrm2(handle, p, d_y, 1, &err);
  SAFEcublas("cublasSnrm2 (2nd) in RestrictedSD_S_gen");
  // compute the norm of Grad_proj  
  cublasSnrm2(handle, mn, Grad_proj, 1, &alpha);
  SAFEcublas("cublasSnrm2 (3rd) in RestrictedSD_S_gen");
//printf("alpha_num = %f and alpha_denom = %f",alpha, err);
  // compute the step size as the ratio of the norms safeguarding against large step-size.
  if (alpha < 1000 * err){
    alpha = alpha / err;
    alpha = alpha * alpha;
  }
  else
    alpha = 1.0f;


 // cout << "alpha = " << alpha << endl;
//printf(" so that alpha = %f\n",alpha);
  // Take the steepest descent step of size alpha in the direction of the gradient Grad
  cublasSaxpy(handle, mn, &alpha, Grad, 1, d_Mat, 1);
  SAFEcublas("cublasSaxpy (2) in RestrictedSD_MC_S_entry.");

  //store d_U in d_U_prev (as initial guess for next iteration)
  cublasScopy(handle, m*r, d_U, 1, d_U_prev,1);

  // Form the rank r approximation via a partial svd and reconstruction
  PartialSVD_SPI(d_U, h_S, d_V, d_Mat, d_MM, d_U_prev, h_S_prev, d_R, m, n, r, maxIter, Tol, handle);
  SAFEcuda("PartialSVD_SPI in RestrictedSD_MC_S_entry_SPI.");

  // Copy value for S from host to device, such that d_S can be utilized in USVt_product
  cudaMemcpy(d_S, h_S, sizeof(float)*r, cudaMemcpyHostToDevice);

  USVt_product(d_Mat, d_U, d_S, d_V, m, n, r, threadsPerBlocknr, numBlocksnr, handle);
  SAFEcuda("USVt_product in RestrictedSD_MC_S_entry.");

  return;
}



//=====================Subspace Unrestricted Iterations ===================================================


void UnrestrictedCG_MC_S_entry_SPI(float *d_Mat, float *Grad, float *Grad_proj, float *Grad_prev, float *Grad_prev_proj, float *d_Y, float *d_U, float *d_S, float *d_V, int *d_A, float *d_y, float *d_y_work, float *d_MM, float *d_U_prev, float *d_R, float *h_S, float *h_S_prev, float *residNorm_prev, const int m, const int n, const int r, const int p, const int mn, const int maxIter, const float Tol, curandGenerator_t gen, dim3 threadsPerBlockp, dim3 numBlocksp, dim3 threadsPerBlocknr, dim3 numBlocksnr, dim3 threadsPerBlockmn, dim3 numBlocksmn,cublasHandle_t handle)
{ 
/*
This function performs a single iteration of a subspace restricted steepest descent step.  The subspace restriction is to the rank r column space.  
*/
  float alpha, alpha_num, alpha_denom;
  float beta, beta_num, beta_denom;
  float err=0;
	float minus_one = -1.0f;

  // form Grad = A^*(Y-A(MAT))
  A_entry_mat(Grad, d_Mat, d_A, mn, p, threadsPerBlockmn, numBlocksmn, threadsPerBlockp, numBlocksp);
  SAFEcuda("A_entry_mat in UnrestrictedCG_MC_S_entry.");

  cublasSaxpy(handle, mn, &minus_one, d_Y, 1, Grad, 1);
  SAFEcublas("cublasSaxpy (1) in UnrestrictedCG_MC_S_entry.");

  cublasSscal(handle, mn, &minus_one, Grad, 1);
  SAFEcublas("cublasSscal (1) in UnrestrictedCG_MC_S_entry.");

  // recording the convergence of the residual
  for (int j = 0; j<15; j++) residNorm_prev[j] = residNorm_prev[j+1];
  cublasSnrm2(handle, mn, Grad, 1, &err);
  SAFEcublas("cublasSnrm2 (1) in UnrestrictedCG_MC_S_entry.");
  residNorm_prev[15]=err;
	//printf("residNormprev15 = %f \n", err);

  // Project the gradient onto the column space defined by U and store in Grad_proj
  ColumnSpProj(Grad_proj, Grad, d_U, d_V, m, n, r, handle);
  SAFEcuda("ColumnSpProj (1) in UnrestrictedCG_MC_S_entry.");

  // Project the past search direction (Grad_prev) into the current column space (U) and store in Grad_prev_proj
  ColumnSpProj(Grad_prev_proj, Grad_prev, d_U, d_V, m, n, r, handle);
  SAFEcuda("ColumnSpProj (2) in UnrestrictedCG_MC_S_entry.");

  // Compute the orthogonalization coefficient
  A_entry_vec(d_y, Grad_prev_proj, d_A, p, threadsPerBlockp, numBlocksp);
  SAFEcuda("A_entry_vec (1) in UnrestrictedCG_MC_S_entry.");
  A_entry_vec(d_y_work, Grad_proj, d_A, p, threadsPerBlockp, numBlocksp);
  SAFEcuda("A_entry_vec (2) in UnrestrictedCG_MC_S_entry.");
  cublasSdot(handle, p, d_y_work, 1, d_y, 1, &beta_num);
  beta_num = -1.0f*beta_num;
  SAFEcuda("cublasSdot (1) in UnrestrictedCG_MC_S_entry.");
  cublasSdot(handle, p, d_y, 1, d_y, 1, &beta_denom);
  SAFEcuda("cublasSdot (2) in UnrestrictedCG_MC_S_entry.");
  if ( abs(beta_num) < 1000*beta_denom )
    beta = beta_num/beta_denom;
  else
    beta = 0.0f;

  // compute the new search directon Grad_prev
  cublasSscal(handle, mn, &beta, Grad_prev, 1);
  SAFEcuda("cublasSscal (2) in UnrestrictedCG_MC_S_entry.");
  cublasSaxpy(handle, mn, &one, Grad, 1, Grad_prev, 1);
  SAFEcuda("cublasSaxpy (2) in UnrestrictedCG_MC_S_entry.");

  // project the search direciton into the current subspace and store in Grad_prev_proj
  ColumnSpProj(Grad_prev_proj, Grad_prev, d_U, d_V, m, n, r, handle);
  SAFEcuda("ColumnSpProj (3) in UnrestrictedCG_MC_S_entry.");
  

  // Use Grad to store the entry sensed verstion of the projected search direction
  A_entry_vec(d_y, Grad_prev_proj, d_A, p, threadsPerBlockp, numBlocksp);
  SAFEcuda("A_entry_vec (3) in UnrestrictedCG_MC_S_entry.");
//  A_entry_mat(Grad, Grad_prev_proj, d_A, mn, p, threadsPerBlockmn, numBlocksmn, threadsPerBlockp, numBlocksp);
//  SAFEcuda("A_entry_mat (2) in UnrestrictedCG_MC_S_entry.");

  // Compute the update step size
  cublasSdot(handle, mn, Grad_prev_proj, 1, Grad_proj, 1, &alpha_num);
  SAFEcublas("cubalsSdot (3) in UnrestrictedCG_MC_S_entry.");
  cublasSdot(handle, p, d_y, 1, d_y, 1, &alpha_denom); //(mn, Grad, 1, Grad, 1);
  SAFEcublas("cubalsSdot (4) in UnrestrictedCG_MC_S_entry.");
  if ( alpha_num < 1000*alpha_denom )
    alpha = alpha_num/alpha_denom;
  else
    alpha = 1.0f;

  // Take the steepest descent step of size alpha in the direction of the gradient Grad
  cublasSaxpy(handle, mn, &alpha, Grad_prev, 1, d_Mat, 1);
  SAFEcublas("cublasSaxpy (2) in UnrestrictedCG_MC_S_entry.");

  //store d_U in d_U_prev (as initial guess for next iteration)
  cublasScopy(handle, m*r, d_U, 1, d_U_prev,1);

  // Form the rank r approximation via a partial svd and reconstruction
  PartialSVD_SPI(d_U, h_S, d_V, d_Mat, d_MM, d_U_prev, h_S_prev, d_R, m, n, r, maxIter, Tol, handle);
  SAFEcuda("PartialSVD in UnrestrictedCG_MC_S_entry.");

  // Copy value for S from host to device, such that d_S can be utilized in USVt_product
  cudaMemcpy(d_S, h_S, sizeof(float)*r, cudaMemcpyHostToDevice);

  USVt_product(d_Mat, d_U, d_S, d_V, m, n, r, threadsPerBlocknr, numBlocksnr, handle);
  SAFEcuda("USVt_product in UnrestrictedCG_MC_S_entry.");

//  cout << "alpha = " << alpha << "   beta = " << beta << endl;
  return;
}



float normest(float *d_Mat, const int m, const int n, float tol, cublasHandle_t handle){

	int maxiter=100;
	int iter = 0;
	float e;
	//float *p_e = &e;
	float e0 = 0;
	float normx;
	float alpha;
	float one = 1.0f;
	float zero = 0.0f;

	
	
	//create vector of length m with entries all set to 1
	float *h_ones = (float*)malloc(sizeof(float)*m);
	for (int i=0; i<m; i++) h_ones[i] = 1;
	float *d_ones;
	cudaMalloc((void**)&d_ones, m * sizeof(float));
  SAFEcudaMalloc("d_ones");
	cudaMemcpy(d_ones, h_ones, sizeof(float)*m, cudaMemcpyHostToDevice);
	free(h_ones);

	//use d_x to calculate column sum
	float *d_x;
	cudaMalloc((void**)&d_x, n * sizeof(float));
  SAFEcudaMalloc("d_x");

	//Compute column sum of d_Mat, store in d_x
	cublasSgemv(handle, CUBLAS_OP_T,m,n, &one,d_Mat, m, d_ones,1, *zero, d_x,1);
	
	cublasSnrm2(handle, n, d_x, 1, &e);

	if (e == 0) return e;

	// d_x = d_x/e
	alpha = 1.0/e;
	cublasSscal(handle, n, &alpha, d_x,1);

	while (fabs(e-e0)> tol*e){
		e0 =e;
		cublasSgemv(handle, CUBLAS_OP_N, m,n, &one, d_Mat, m, d_x, 1, &zero, d_ones,1);
		cublasSgemv(handle, CUBLAS_OP_T, m,n, &one, d_Mat, m, d_ones, 1, &zero, d_x,1);
		
		cublasSnrm2(handle,n, d_x, 1, &normx);
		cublasSnrm2(handle, m, d_ones,1, &alpha);
		e = normx/alpha;
		alpha = 1.0/normx;
		cublasSscal(handle, n, &alpha , d_x,1);
		iter++;

		if (iter > maxiter){
			printf("normest: not converged");
			cudaFree(d_ones);
			cudaFree(d_x);
			break;
		}
	}

	cudaFree(d_ones);
	cudaFree(d_x);
	return e;
}



	

	






